name: Deployment
on:
  push:
    branches:
      - main
      - dev
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '22'
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        id: test
        run: npm test
      - name: Report failed tests
        if: failure() && steps.test.outcome == 'failure'
        run: |
          echo "Some tests have failed. Reporting..."
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      #context=step, id=get-filename, key=filename
      script-filename: ${{ steps.get-filename.outputs.filename }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '22'
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci

      - name: Set up environment variables
        run: |
          cp .env.example .env
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "Set production environment variables"
            echo "${{ secrets.PROD_ENV }}" > .env
          else
            echo "Set development environment variables"
            echo "${{ secrets.DEV_ENV }}" > .env
          fi
          cat .env

      - name: Build project
        run: npm run build
      - name: Get Js file name
        id: get-filename
        run: |
          JS_FILENAME=$(find dist/assets -name "*.js" -printf "%f\n")
          echo "filename=$JS_FILENAME" >> $GITHUB_OUTPUT
      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      - name: Output dist
        run: ls -la
      - name: Output script filename
        run: echo "Script filename is ${{ needs.build.outputs.script-filename }}"
      - name: Deploy to server
        run: echo "Deploying to server..."
  report:
    needs: deploy
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Report deployment failure
        run: echo "Deployment failed. Please check the logs above for details."
